# -*- coding: utf-8 -*-

# Define your item pipelines here
#
# Don't forget to add your pipeline to the ITEM_PIPELINES setting
# See: http://doc.scrapy.org/en/latest/topics/item-pipeline.html
from scrapy import signals
import json
import codecs

import pymongo
from scrapy.conf import settings
from scrapy.exceptions import DropItem
from scrapy import log
import datetime
import logging

from ipproj.decorator import check_spider_pipeline

class TestprojPipeline(object):
    def process_item(self, item, spider):
        return item

class JsonPipeline1(object):
    def __init__(self):
        self.file = codecs.open('ip1.json','w', encoding='utf-8')

    @check_spider_pipeline
    def process_item(self, item, spider):
        line = json.dumps(dict(item), ensure_ascii=False) + "\n"
        self.file.write(line)
        return item
    def spider_closed(self, spider):
        self.file.close()

class JsonPipeline2(object):
    def __init__(self):
    	self.file = codecs.open('ip2.json','w', encoding='utf-8')

    @check_spider_pipeline
    def process_item(self, item, spider):
    	line = json.dumps(dict(item), ensure_ascii=False) + "\n"
    	self.file.write(line)
        return item
    def spider_closed(self, spider):
    	self.file.close()


class MongoDBFmgbPipeline(object):
    def __init__(self):
        connection = pymongo.MongoClient(
            settings['MONGODB_SERVER'],
            settings['MONGODB_PORT']
        )
        db = connection[settings['MONGODB_DB']]
        self.collection = db[settings['MONGODB_COLLECTION_FMGB']]
        pass

    @check_spider_pipeline
    def process_item(self, item, spider):
        valid = True
        for data in item:
            if not data:
                valid = False
                raise DropItem("Missing {0}!".format(data['title']))
        if valid:
            # self.collection.insert(dict(item))
            temp = self.collection.find_one(dict(item))

            now = datetime.datetime.now()
            otherStyleTime = now.strftime("%Y-%m-%d %H:%M:%S")
            
            if(temp):
                logging.info( otherStyleTime + " item is already exist! "+ item["authId"])
                i = dict(item)
                i['_id']=temp['_id']
                self.collection.save(i)
            else:
                logging.info( otherStyleTime + " item is not exist! " + item["authId"])
                self.collection.insert(dict(item))
            log.msg("Patent info added to MongoDB database!",
                    level=log.DEBUG, spider=spider)
        return item


class MongoDBFmsqPipeline(object):
    def __init__(self):
        connection = pymongo.MongoClient(
            settings['MONGODB_SERVER'],
            settings['MONGODB_PORT']
        )
        db = connection[settings['MONGODB_DB']]
        self.collection = db[settings['MONGODB_COLLECTION_FMSQ']]
        pass

    @check_spider_pipeline
    def process_item(self, item, spider):
        valid = True
        for data in item:
            if not data:
                valid = False
                raise DropItem("Missing {0}!".format(data['title']))
        if valid:
            # self.collection.insert(dict(item))
            temp = self.collection.find_one(dict(item))

            now = datetime.datetime.now()
            otherStyleTime = now.strftime("%Y-%m-%d %H:%M:%S")
            
            if(temp):
                logging.info( otherStyleTime + " item is already exist! "+ item["authId"])
                i = dict(item)
                i['_id']=temp['_id']
                self.collection.save(i)
            else:
                logging.info( otherStyleTime + " item is not exist! " + item["authId"])
                self.collection.insert(dict(item))
            log.msg("Patent info added to MongoDB database!",
                    level=log.DEBUG, spider=spider)
        return item

class MongoDBXxsqPipeline(object):
    def __init__(self):
        connection = pymongo.MongoClient(
            settings['MONGODB_SERVER'],
            settings['MONGODB_PORT']
        )
        db = connection[settings['MONGODB_DB']]
        self.collection = db[settings['MONGODB_COLLECTION_XXSQ']]
        pass

    @check_spider_pipeline
    def process_item(self, item, spider):
        valid = True
        for data in item:
            if not data:
                valid = False
                raise DropItem("Missing {0}!".format(data['title']))
        if valid:
            # self.collection.insert(dict(item))
            temp = self.collection.find_one(dict(item))

            now = datetime.datetime.now()
            otherStyleTime = now.strftime("%Y-%m-%d %H:%M:%S")
            
            if(temp):
                logging.info( otherStyleTime + " item is already exist! "+ item["authId"])
                i = dict(item)
                i['_id']=temp['_id']
                self.collection.save(i)
            else:
                logging.info( otherStyleTime + " item is not exist! " + item["authId"])
                self.collection.insert(dict(item))
            log.msg("Patent info added to MongoDB database!",
                    level=log.DEBUG, spider=spider)
        return item

class MongoDBWgsqPipeline(object):
    def __init__(self):
        connection = pymongo.MongoClient(
            settings['MONGODB_SERVER'],
            settings['MONGODB_PORT']
        )
        db = connection[settings['MONGODB_DB']]
        self.collection = db[settings['MONGODB_COLLECTION_WGSQ']]
        pass

    @check_spider_pipeline
    def process_item(self, item, spider):
        valid = True
        for data in item:
            if not data:
                valid = False
                raise DropItem("Missing {0}!".format(data['title']))
        if valid:
            # self.collection.insert(dict(item))
            temp = self.collection.find_one(dict(item))

            now = datetime.datetime.now()
            otherStyleTime = now.strftime("%Y-%m-%d %H:%M:%S")
            
            if(temp):
                logging.info( otherStyleTime + " item is already exist! "+ item["authId"])
                i = dict(item)
                i['_id']=temp['_id']
                self.collection.save(i)
            else:
                logging.info( otherStyleTime + " item is not exist! " + item["authId"])
                self.collection.insert(dict(item))
            log.msg("Patent info added to MongoDB database!",
                    level=log.DEBUG, spider=spider)
        return item